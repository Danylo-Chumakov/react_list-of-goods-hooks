{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortBy","goodsFromServer","App","useState","Default","sortValue","setSortValue","isReverse","setValueReverse","getNewList","useMemo","list","valueReset","sort","val1","val2","Name","localeCompare","Length","length","reverse","getNewSortList","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAKKA,E,oFAAAA,K,WAAAA,E,YAAAA,E,iBAAAA,M,KAML,IAAMC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA0BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAASH,EAAOI,SAAlD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAqCH,oBAAS,GAA9C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAAuBC,mBAAQ,kBA3BvC,SAAwBC,EAAgBN,EAAmBE,GACzD,IAAIK,EAAU,YAAOD,GAmBrB,OAjBIN,GACFO,EAAWC,MAAK,SAACC,EAAMC,GACrB,OAAQV,GACN,KAAKL,EAAOgB,KACV,OAAOF,EAAKG,cAAcF,GAC5B,KAAKf,EAAOkB,OACV,OAAOJ,EAAKK,OAASJ,EAAKI,OAC5B,QACE,OAAO,MAKXZ,IACFK,EAAaA,EAAWQ,WAGnBR,EAOoCS,CACzCpB,EACAI,EACAE,KACC,CAACN,EAAiBI,EAAWE,IAmBhC,OACE,qBAAKe,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,CAAE,WAAYnB,IAAcL,EAAOgB,MAC/C,kBACFS,QArBmB,WAC3BnB,EAAaN,EAAOgB,OAgBd,iCASA,wBACEO,KAAK,SACLD,UAAWE,IACT,CAAE,WAAYnB,IAAcL,EAAOkB,QAAU,qBAE/CO,QA3BqB,WAC7BnB,EAAaN,EAAOkB,SAqBd,4BAUA,wBACEK,KAAK,SACLD,UAAWE,IAAG,CAAE,YAAajB,GAAa,qBAC1CkB,QA3CW,WACnBjB,GAAgB,SAACkB,GAAD,OAAWA,MAuCrB,sBAQEnB,GAAaF,IAAcL,EAAOI,UAClC,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QAxCQ,WAClBnB,EAAaN,EAAOI,SACpBI,GAAgB,IAmCR,sBAUJ,oBAAIc,UAAU,WAAd,SACGb,EAAWkB,KAAI,SAACC,GAAD,OACd,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,cCnHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.49896250.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport React, { useState, useMemo } from 'react';\n\nenum SortBy {\n  Default = '',\n  Name = 'name',\n  Length = 'length',\n}\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getNewSortList(list: string[], sortValue: string, isReverse: boolean) {\n  let valueReset = [...list];\n\n  if (sortValue) {\n    valueReset.sort((val1, val2) => {\n      switch (sortValue) {\n        case SortBy.Name:\n          return val1.localeCompare(val2);\n        case SortBy.Length:\n          return val1.length - val2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    valueReset = valueReset.reverse();\n  }\n\n  return valueReset;\n}\n\nexport const App: React.FC = () => {\n  const [sortValue, setSortValue] = useState(SortBy.Default);\n  const [isReverse, setValueReverse] = useState(false);\n\n  const getNewList: string[] = useMemo(() => getNewSortList(\n    goodsFromServer,\n    sortValue,\n    isReverse,\n  ), [goodsFromServer, sortValue, isReverse]);\n\n  const reverseValue = () => {\n    setValueReverse((prev) => !prev);\n  };\n\n  const handlerClickSortName = () => {\n    setSortValue(SortBy.Name);\n  };\n\n  const handlerClickSortLength = () => {\n    setSortValue(SortBy.Length);\n  };\n\n  const resetValues = () => {\n    setSortValue(SortBy.Default);\n    setValueReverse(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={cn({ 'is-light': sortValue !== SortBy.Name },\n              'button is-info')}\n            onClick={handlerClickSortName}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn(\n              { 'is-light': sortValue !== SortBy.Length }, 'button is-success',\n            )}\n            onClick={handlerClickSortLength}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={cn({ 'is-light': !isReverse }, 'button is-warning')}\n            onClick={reverseValue}\n          >\n            Reverse\n          </button>\n\n          {(isReverse || sortValue !== SortBy.Default) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={resetValues}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul className=\"GoodList\">\n          {getNewList.map((good) => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}